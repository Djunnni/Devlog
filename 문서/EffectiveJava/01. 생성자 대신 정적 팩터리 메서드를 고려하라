### 정적 팩터리 메서드


#### 예시
Boolean 객체 내에 valueOf 함수를 보면
```java
static final Boolean TRUE = true;
static final Boolean FALSE = false;

static Boolean valueOf(boolean bool) {
    return bool ? TRUE : FALSE;
}

```

#### 장점

- 이름을 가질 수 있다.
=> 생성자의 파라미터를 늘여가며 작업해도 되나 한계가 있다.
=> 생성자로만 할 때, 리턴결과가 무엇인지 정확히 알 수 없다.

- 호출될 때마다 인스턴스를 새로 생성하지 않아도 된다. // 예시와 직접적으로 관계있음.
=> 불변 클래스는 instance를 미리 만들어 놓거나 캐싱해서 재활용하는 식으로 불필요한 상황을 피할 수 있다.

> 플라이웨이트 패턴에 대해서는 [여기](https://lee1535.tistory.com/106)를 참고하자.

- 반환타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.

- 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있어야함.
=> 클라이언트는 모르나 개발자 입장에서 크기에 따라 더 최선의 방법을 사용할 수 있기 때문이다.

- 정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.
=> JDBC처럼 서비스 제공자의 프레임워크에서 처리를 하고 반영하도록 도움으로써 모듈화가 자유롭다.


#### 서비스 제공자 프레임워크

* 서비스 인터페이스
구현체의 동작을 정의

* 제공자 등록 API
제공자가 구현체를 동록할 때, 사용하는 제공자 등록 API

* 서비스 접근 API
클라이언트가 인스턴스를 얻을 때, 사용

* 서비스 제공자 인터페이스
인스턴스를 생성하는 팩터리 객체를 설명
없다면 각 구현체를 인터페이스로 만들 때, 리플렉션을 사용해야 한다.

#### 단점

- 상속하려면 public이나 protected 생성자가 필요하니 정적 팩터리 메서드만 제공하면 하위 클래스를 만들 수 없다.

- 정적 팩터리 메서드는 개발자가 찾기가 어렵다.

