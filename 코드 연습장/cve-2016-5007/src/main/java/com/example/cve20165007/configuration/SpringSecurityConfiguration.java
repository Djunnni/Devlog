package com.example.cve20165007.configuration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.SecurityConfigurer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SpringSecurityConfiguration {

    @Bean
    public WebSecurityCustomizer webSecurityCustomizer() {
        return (web) -> web.ignoring().antMatchers("/api/test");
    }

    /**
     * 화이트리스트 사용하기
     * @param http
     * @return
     * @throws Exception
     */
    @Bean
    public SecurityFilterChain whiteListFilterChain(HttpSecurity http) throws Exception {
        return http
                .csrf().disable()
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
                .authorizeRequests()
                .antMatchers(HttpMethod.GET, "/api/signup", "/api/signout").permitAll()
                .anyRequest().hasAnyRole("ADMIN","USER")
                .and()
                .build();
    }

    /**
     * 블랙 리스트 with antMatchers
     * @param http
     * @return
     * @throws Exception
     */
    @Bean
    public SecurityFilterChain blackListFilterChain(HttpSecurity http) throws Exception {
        return http
                .csrf().disable()
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
                .authorizeRequests()
                .antMatchers(HttpMethod.GET, "/api/admin/**").hasRole("ADMIN")
                .anyRequest().permitAll()
                .and()
                .build();
    }

    /**
     * 블랙 리스트 with mvcMatchers
     * @param http
     * @return
     * @throws Exception
     */
    @Bean
    public SecurityFilterChain blackListFilterChainWithMVCMatchers(HttpSecurity http) throws Exception {
        return http
                .csrf().disable()
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
                .authorizeRequests()
                .mvcMatchers(HttpMethod.GET, "/api/admin").hasRole("ADMIN")
                .anyRequest().permitAll()
                .and()
                .build();
    }
}
